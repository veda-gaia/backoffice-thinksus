import { Component, Input, NgZone, Output, ViewChildren, QueryList, } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { EventEmitter } from '@angular/core';
// eslint-disable-next-line @nrwl/nx/enforce-module-boundaries
import { getDocxToHtml, getViewerDetails, googleCheckSubscription, iframeIsLoaded, isLocalFile, replaceLocalUrl, } from 'docviewhelper';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "@angular/common";
export class NgxDocViewerComponent {
    constructor(domSanitizer, ngZone) {
        this.domSanitizer = domSanitizer;
        this.ngZone = ngZone;
        this.loaded = new EventEmitter();
        this.url = '';
        this.queryParams = '';
        this.viewerUrl = '';
        this.googleCheckInterval = 3000;
        this.googleMaxChecks = 5;
        this.disableContent = 'none';
        this.googleCheckContentLoaded = true;
        this.viewer = 'google';
        this.overrideLocalhost = '';
        this.iframes = undefined;
        this.fullUrl = undefined;
        this.externalViewer = false;
        this.docHtml = '';
        this.configuredViewer = 'google';
        this.checkIFrameSubscription = undefined;
        this.shouldCheckIframe = false;
    }
    ngAfterViewInit() {
        if (this.shouldCheckIframe) {
            const iframe = this.iframes?.first?.nativeElement;
            if (iframe) {
                this.shouldCheckIframe = false;
                this.reloadIframe(iframe);
            }
        }
    }
    ngOnDestroy() {
        if (this.checkIFrameSubscription) {
            this.checkIFrameSubscription.unsubscribe();
        }
    }
    async ngOnChanges(changes) {
        if (changes &&
            changes['viewer'] &&
            (changes['viewer'].isFirstChange ||
                changes['viewer'].currentValue !== changes['viewer'].previousValue)) {
            if (this.viewer !== 'google' &&
                this.viewer !== 'office' &&
                this.viewer !== 'mammoth' &&
                this.viewer !== 'pdf' &&
                this.viewer !== 'url') {
                console.error(`Unsupported viewer: '${this.viewer}'. Supported viewers: google, office, mammoth and pdf`);
            }
            this.configuredViewer = this.viewer;
        }
        if ((changes['url'] &&
            changes['url'].currentValue !== changes['url'].previousValue) ||
            (changes['viewer'] &&
                changes['viewer'].currentValue !== changes['viewer'].previousValue) ||
            (changes['viewerUrl'] &&
                changes['viewerUrl'].currentValue !==
                    changes['viewerUrl'].previousValue)) {
            let viewerDetails = getViewerDetails(this.url, this.configuredViewer, this.queryParams, this.viewerUrl);
            this.externalViewer = viewerDetails.externalViewer;
            if (viewerDetails.externalViewer &&
                this.overrideLocalhost &&
                isLocalFile(this.url)) {
                const newUrl = replaceLocalUrl(this.url, this.overrideLocalhost);
                viewerDetails = getViewerDetails(newUrl, this.configuredViewer, this.queryParams, this.viewerUrl);
            }
            this.docHtml = '';
            if (this.checkIFrameSubscription) {
                this.checkIFrameSubscription.unsubscribe();
            }
            if (!this.url) {
                this.fullUrl = undefined;
            }
            else if (viewerDetails.externalViewer ||
                this.configuredViewer === 'url' ||
                this.configuredViewer === 'pdf') {
                this.fullUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(viewerDetails.url);
                // see:
                // https://stackoverflow.com/questions/40414039/google-docs-viewer-returning-204-responses-no-longer-working-alternatives
                // hack to reload iframe if it's not loaded.
                // would maybe be better to use view.officeapps.live.com but seems not to work with sas token.
                if (this.configuredViewer === 'google' &&
                    this.googleCheckContentLoaded) {
                    this.ngZone.runOutsideAngular(() => {
                        // if it's not loaded after the googleIntervalCheck, then open load again.
                        const iframe = this.iframes?.first
                            ?.nativeElement;
                        if (iframe) {
                            this.reloadIframe(iframe);
                        }
                        else {
                            this.shouldCheckIframe = true;
                        }
                    });
                }
            }
            else if (this.configuredViewer === 'mammoth') {
                this.docHtml = await getDocxToHtml(this.url);
            }
        }
    }
    reloadIframe(iframe) {
        this.checkIFrameSubscription = googleCheckSubscription();
        this.checkIFrameSubscription.subscribe(iframe, this.googleCheckInterval, this.googleMaxChecks);
    }
    iframeLoaded() {
        const iframe = this.iframes?.first?.nativeElement;
        if (iframe && iframeIsLoaded(iframe)) {
            this.loaded.emit(undefined);
            if (this.checkIFrameSubscription) {
                this.checkIFrameSubscription.unsubscribe();
            }
        }
    }
}
NgxDocViewerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: NgxDocViewerComponent, deps: [{ token: i1.DomSanitizer }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
NgxDocViewerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.3", type: NgxDocViewerComponent, selector: "ngx-doc-viewer", inputs: { url: "url", queryParams: "queryParams", viewerUrl: "viewerUrl", googleCheckInterval: "googleCheckInterval", googleMaxChecks: "googleMaxChecks", disableContent: "disableContent", googleCheckContentLoaded: "googleCheckContentLoaded", viewer: "viewer", overrideLocalhost: "overrideLocalhost" }, outputs: { loaded: "loaded" }, viewQueries: [{ propertyName: "iframes", predicate: ["iframe"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<ng-container *ngIf=\"!externalViewer\">\n  <div *ngIf=\"configuredViewer !== 'pdf'\" [innerHtml]=\"docHtml\"></div>\n  <object\n    *ngIf=\"fullUrl && configuredViewer === 'pdf'\"\n    [data]=\"fullUrl\"\n    type=\"application/pdf\"\n    width=\"100%\"\n    height=\"100%\"\n  >\n    <p>\n      Your browser does not support PDFs.\n      <a [href]=\"fullUrl\">Download the PDF</a>.\n    </p>\n  </object>\n</ng-container>\n<ng-container *ngIf=\"externalViewer\">\n  <iframe\n    (load)=\"iframeLoaded()\"\n    *ngIf=\"fullUrl && disableContent === 'none'\"\n    #iframe\n    id=\"iframe-doc-viewer\"\n    frameBorder=\"0\"\n    [src]=\"fullUrl\"\n  ></iframe>\n  <div class=\"container\" *ngIf=\"disableContent !== 'none'\">\n    <div\n      [class.overlay-full]=\"disableContent === 'all'\"\n      [class.overlay-popout-google]=\"\n        configuredViewer === 'google' &&\n        (disableContent === 'popout' || disableContent === 'popout-hide')\n      \"\n      [class.overlay-popout-office]=\"\n        configuredViewer === 'office' &&\n        (disableContent === 'popout' || disableContent === 'popout-hide')\n      \"\n      [style.background-color]=\"\n        disableContent === 'popout-hide' ? '#fff' : 'transparent'\n      \"\n    ></div>\n    <iframe\n      (load)=\"iframeLoaded()\"\n      *ngIf=\"fullUrl\"\n      #iframe\n      id=\"iframe\"\n      frameBorder=\"0\"\n      [src]=\"fullUrl\"\n    ></iframe>\n  </div>\n</ng-container>\n", styles: [":host{display:block}.container{width:100%;height:100%;position:relative}.overlay-popout-google{width:40px;height:40px;right:26px;top:11.5px;position:absolute;z-index:1000}.overlay-popout-office{width:100px;height:20px;right:0;bottom:0;position:absolute;z-index:1000}.overlay-full{width:100%;height:100%;right:0;top:0;position:absolute;z-index:1000}iframe{width:100%;height:100%}\n"], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: NgxDocViewerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-doc-viewer', template: "<ng-container *ngIf=\"!externalViewer\">\n  <div *ngIf=\"configuredViewer !== 'pdf'\" [innerHtml]=\"docHtml\"></div>\n  <object\n    *ngIf=\"fullUrl && configuredViewer === 'pdf'\"\n    [data]=\"fullUrl\"\n    type=\"application/pdf\"\n    width=\"100%\"\n    height=\"100%\"\n  >\n    <p>\n      Your browser does not support PDFs.\n      <a [href]=\"fullUrl\">Download the PDF</a>.\n    </p>\n  </object>\n</ng-container>\n<ng-container *ngIf=\"externalViewer\">\n  <iframe\n    (load)=\"iframeLoaded()\"\n    *ngIf=\"fullUrl && disableContent === 'none'\"\n    #iframe\n    id=\"iframe-doc-viewer\"\n    frameBorder=\"0\"\n    [src]=\"fullUrl\"\n  ></iframe>\n  <div class=\"container\" *ngIf=\"disableContent !== 'none'\">\n    <div\n      [class.overlay-full]=\"disableContent === 'all'\"\n      [class.overlay-popout-google]=\"\n        configuredViewer === 'google' &&\n        (disableContent === 'popout' || disableContent === 'popout-hide')\n      \"\n      [class.overlay-popout-office]=\"\n        configuredViewer === 'office' &&\n        (disableContent === 'popout' || disableContent === 'popout-hide')\n      \"\n      [style.background-color]=\"\n        disableContent === 'popout-hide' ? '#fff' : 'transparent'\n      \"\n    ></div>\n    <iframe\n      (load)=\"iframeLoaded()\"\n      *ngIf=\"fullUrl\"\n      #iframe\n      id=\"iframe\"\n      frameBorder=\"0\"\n      [src]=\"fullUrl\"\n    ></iframe>\n  </div>\n</ng-container>\n", styles: [":host{display:block}.container{width:100%;height:100%;position:relative}.overlay-popout-google{width:40px;height:40px;right:26px;top:11.5px;position:absolute;z-index:1000}.overlay-popout-office{width:100px;height:20px;right:0;bottom:0;position:absolute;z-index:1000}.overlay-full{width:100%;height:100%;right:0;top:0;position:absolute;z-index:1000}iframe{width:100%;height:100%}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }, { type: i0.NgZone }]; }, propDecorators: { loaded: [{
                type: Output
            }], url: [{
                type: Input
            }], queryParams: [{
                type: Input
            }], viewerUrl: [{
                type: Input
            }], googleCheckInterval: [{
                type: Input
            }], googleMaxChecks: [{
                type: Input
            }], disableContent: [{
                type: Input
            }], googleCheckContentLoaded: [{
                type: Input
            }], viewer: [{
                type: Input
            }], overrideLocalhost: [{
                type: Input
            }], iframes: [{
                type: ViewChildren,
                args: ['iframe']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdW1lbnQtdmlld2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25neC1kb2Mtdmlld2VyL3NyYy9saWIvZG9jdW1lbnQtdmlld2VyLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25neC1kb2Mtdmlld2VyL3NyYy9saWIvZG9jdW1lbnQtdmlld2VyLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLE1BQU0sRUFJTixNQUFNLEVBQ04sWUFBWSxFQUNaLFNBQVMsR0FHVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsWUFBWSxFQUFtQixNQUFNLDJCQUEyQixDQUFDO0FBQzFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0MsOERBQThEO0FBQzlELE9BQU8sRUFDTCxhQUFhLEVBQ2IsZ0JBQWdCLEVBQ2hCLHVCQUF1QixFQUN2QixjQUFjLEVBQ2QsV0FBVyxFQUNYLGVBQWUsR0FFaEIsTUFBTSxlQUFlLENBQUM7Ozs7QUFpRHZCLE1BQU0sT0FBTyxxQkFBcUI7SUFzQmhDLFlBQW9CLFlBQTBCLEVBQVUsTUFBYztRQUFsRCxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUFVLFdBQU0sR0FBTixNQUFNLENBQVE7UUFuQjVELFdBQU0sR0FBdUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNqRCxRQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ1QsZ0JBQVcsR0FBRyxFQUFFLENBQUM7UUFDakIsY0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNmLHdCQUFtQixHQUFHLElBQUksQ0FBQztRQUMzQixvQkFBZSxHQUFHLENBQUMsQ0FBQztRQUNwQixtQkFBYyxHQUE4QyxNQUFNLENBQUM7UUFDbkUsNkJBQXdCLEdBQUcsSUFBSSxDQUFDO1FBQ2hDLFdBQU0sR0FBZSxRQUFR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dCxcbiAgTmdab25lLFxuICBPbkRlc3Ryb3ksXG4gIE9uQ2hhbmdlcyxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgT3V0cHV0LFxuICBWaWV3Q2hpbGRyZW4sXG4gIFF1ZXJ5TGlzdCxcbiAgRWxlbWVudFJlZixcbiAgQWZ0ZXJWaWV3SW5pdCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVSZXNvdXJjZVVybCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQG5yd2wvbngvZW5mb3JjZS1tb2R1bGUtYm91bmRhcmllc1xuaW1wb3J0IHtcbiAgZ2V0RG9jeFRvSHRtbCxcbiAgZ2V0Vmlld2VyRGV0YWlscyxcbiAgZ29vZ2xlQ2hlY2tTdWJzY3JpcHRpb24sXG4gIGlmcmFtZUlzTG9hZGVkLFxuICBpc0xvY2FsRmlsZSxcbiAgcmVwbGFjZUxvY2FsVXJsLFxuICBJRnJhbWVSZWxvYWRlcixcbn0gZnJvbSAnZG9jdmlld2hlbHBlcic7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCB0eXBlIHZpZXdlclR5cGUgPSAnZ29vZ2xlJyB8ICdvZmZpY2UnIHwgJ21hbW1vdGgnIHwgJ3BkZicgfCAndXJsJztcbkBDb21wb25lbnQoe1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L2NvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ25neC1kb2Mtdmlld2VyJyxcbiAgdGVtcGxhdGVVcmw6ICdkb2N1bWVudC12aWV3ZXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZXM6IFtcbiAgICBgXG4gICAgICA6aG9zdCB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgfVxuICAgICAgLmNvbnRhaW5lciB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIH1cbiAgICAgIC5vdmVybGF5LXBvcG91dC1nb29nbGUge1xuICAgICAgICB3aWR0aDogNDBweDtcbiAgICAgICAgaGVpZ2h0OiA0MHB4O1xuICAgICAgICByaWdodDogMjZweDtcbiAgICAgICAgdG9wOiAxMS41cHg7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgei1pbmRleDogMTAwMDtcbiAgICAgIH1cbiAgICAgIC5vdmVybGF5LXBvcG91dC1vZmZpY2Uge1xuICAgICAgICB3aWR0aDogMTAwcHg7XG4gICAgICAgIGhlaWdodDogMjBweDtcbiAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB6LWluZGV4OiAxMDAwO1xuICAgICAgfVxuICAgICAgLm92ZXJsYXktZnVsbCB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgei1pbmRleDogMTAwMDtcbiAgICAgIH1cbiAgICAgIGlmcmFtZSB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICB9XG4gICAgYCxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgTmd4RG9jVmlld2VyQ29tcG9uZW50XG4gIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXRcbntcbiAgQE91dHB1dCgpIGxvYWRlZDogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBASW5wdXQoKSB1cmwgPSAnJztcbiAgQElucHV0KCkgcXVlcnlQYXJhbXMgPSAnJztcbiAgQElucHV0KCkgdmlld2VyVXJsID0gJyc7XG4gIEBJbnB1dCgpIGdvb2dsZUNoZWNrSW50ZXJ2YWwgPSAzMDAwO1xuICBASW5wdXQoKSBnb29nbGVNYXhDaGVja3MgPSA1O1xuICBASW5wdXQoKSBkaXNhYmxlQ29udGVudDogJ25vbmUnIHwgJ2FsbCcgfCAncG9wb3V0JyB8ICdwb3BvdXQtaGlkZScgPSAnbm9uZSc7XG4gIEBJbnB1dCgpIGdvb2dsZUNoZWNrQ29udGVudExvYWRlZCA9IHRydWU7XG4gIEBJbnB1dCgpIHZpZXdlcjogdmlld2VyVHlwZSA9ICdnb29nbGUnO1xuICBASW5wdXQoKSBvdmVycmlkZUxvY2FsaG9zdCA9ICcnO1xuICBAVmlld0NoaWxkcmVuKCdpZnJhbWUnKSBpZnJhbWVzPzogUXVlcnlMaXN0PEVsZW1lbnRSZWY+ID0gdW5kZWZpbmVkO1xuXG4gIHB1YmxpYyBmdWxsVXJsPzogU2FmZVJlc291cmNlVXJsID0gdW5kZWZpbmVkO1xuICBwdWJsaWMgZXh0ZXJuYWxWaWV3ZXIgPSBmYWxzZTtcbiAgcHVibGljIGRvY0h0bWwgPSAnJztcbiAgcHVibGljIGNvbmZpZ3VyZWRWaWV3ZXI6IHZpZXdlclR5cGUgPSAnZ29vZ2xlJztcbiAgcHJpdmF0ZSBjaGVja0lGcmFtZVN1YnNjcmlwdGlvbj86IElGcmFtZVJlbG9hZGVyID0gdW5kZWZpbmVkO1xuICBwcml2YXRlIHNob3VsZENoZWNrSWZyYW1lID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkb21TYW5pdGl6ZXI6IERvbVNhbml0aXplciwgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSkge31cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc2hvdWxkQ2hlY2tJZnJhbWUpIHtcbiAgICAgIGNvbnN0IGlmcmFtZSA9IHRoaXMuaWZyYW1lcz8uZmlyc3Q/Lm5hdGl2ZUVsZW1lbnQgYXMgSFRNTElGcmFtZUVsZW1lbnQ7XG4gICAgICBpZiAoaWZyYW1lKSB7XG4gICAgICAgIHRoaXMuc2hvdWxkQ2hlY2tJZnJhbWUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZWxvYWRJZnJhbWUoaWZyYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jaGVja0lGcmFtZVN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5jaGVja0lGcmFtZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoXG4gICAgICBjaGFuZ2VzICYmXG4gICAgICBjaGFuZ2VzWyd2aWV3ZXInXSAmJlxuICAgICAgKGNoYW5nZXNbJ3ZpZXdlciddLmlzRmlyc3RDaGFuZ2UgfHxcbiAgICAgICAgY2hhbmdlc1sndmlld2VyJ10uY3VycmVudFZhbHVlICE9PSBjaGFuZ2VzWyd2aWV3ZXInXS5wcmV2aW91c1ZhbHVlKVxuICAgICkge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLnZpZXdlciAhPT0gJ2dvb2dsZScgJiZcbiAgICAgICAgdGhpcy52aWV3ZXIgIT09ICdvZmZpY2UnICYmXG4gICAgICAgIHRoaXMudmlld2VyICE9PSAnbWFtbW90aCcgJiZcbiAgICAgICAgdGhpcy52aWV3ZXIgIT09ICdwZGYnICYmXG4gICAgICAgIHRoaXMudmlld2VyICE9PSAndXJsJ1xuICAgICAgKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgYFVuc3VwcG9ydGVkIHZpZXdlcjogJyR7dGhpcy52aWV3ZXJ9Jy4gU3VwcG9ydGVkIHZpZXdlcnM6IGdvb2dsZSwgb2ZmaWNlLCBtYW1tb3RoIGFuZCBwZGZgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aGlzLmNvbmZpZ3VyZWRWaWV3ZXIgPSB0aGlzLnZpZXdlcjtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAoY2hhbmdlc1sndXJsJ10gJiZcbiAgICAgICAgY2hhbmdlc1sndXJsJ10uY3VycmVudFZhbHVlICE9PSBjaGFuZ2VzWyd1cmwnXS5wcmV2aW91c1ZhbHVlKSB8fFxuICAgICAgKGNoYW5nZXNbJ3ZpZXdlciddICYmXG4gICAgICAgIGNoYW5nZXNbJ3ZpZXdlciddLmN1cnJlbnRWYWx1ZSAhPT0gY2hhbmdlc1sndmlld2VyJ10ucHJldmlvdXNWYWx1ZSkgfHxcbiAgICAgIChjaGFuZ2VzWyd2aWV3ZXJVcmwnXSAmJlxuICAgICAgICBjaGFuZ2VzWyd2aWV3ZXJVcmwnXS5jdXJyZW50VmFsdWUgIT09XG4gICAgICAgICAgY2hhbmdlc1sndmlld2VyVXJsJ10ucHJldmlvdXNWYWx1ZSlcbiAgICApIHtcbiAgICAgIGxldCB2aWV3ZXJEZXRhaWxzID0gZ2V0Vmlld2VyRGV0YWlscyhcbiAgICAgICAgdGhpcy51cmwsXG4gICAgICAgIHRoaXMuY29uZmlndXJlZFZpZXdlcixcbiAgICAgICAgdGhpcy5xdWVyeVBhcmFtcyxcbiAgICAgICAgdGhpcy52aWV3ZXJVcmxcbiAgICAgICk7XG4gICAgICB0aGlzLmV4dGVybmFsVmlld2VyID0gdmlld2VyRGV0YWlscy5leHRlcm5hbFZpZXdlcjtcbiAgICAgIGlmIChcbiAgICAgICAgdmlld2VyRGV0YWlscy5leHRlcm5hbFZpZXdlciAmJlxuICAgICAgICB0aGlzLm92ZXJyaWRlTG9jYWxob3N0ICYmXG4gICAgICAgIGlzTG9jYWxGaWxlKHRoaXMudXJsKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IG5ld1VybCA9IHJlcGxhY2VMb2NhbFVybCh0aGlzLnVybCwgdGhpcy5vdmVycmlkZUxvY2FsaG9zdCk7XG4gICAgICAgIHZpZXdlckRldGFpbHMgPSBnZXRWaWV3ZXJEZXRhaWxzKFxuICAgICAgICAgIG5ld1VybCxcbiAgICAgICAgICB0aGlzLmNvbmZpZ3VyZWRWaWV3ZXIsXG4gICAgICAgICAgdGhpcy5xdWVyeVBhcmFtcyxcbiAgICAgICAgICB0aGlzLnZpZXdlclVybFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdGhpcy5kb2NIdG1sID0gJyc7XG4gICAgICBpZiAodGhpcy5jaGVja0lGcmFtZVN1YnNjcmlwdGlvbikge1xuICAgICAgICB0aGlzLmNoZWNrSUZyYW1lU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMudXJsKSB7XG4gICAgICAgIHRoaXMuZnVsbFVybCA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHZpZXdlckRldGFpbHMuZXh0ZXJuYWxWaWV3ZXIgfHxcbiAgICAgICAgdGhpcy5jb25maWd1cmVkVmlld2VyID09PSAndXJsJyB8fFxuICAgICAgICB0aGlzLmNvbmZpZ3VyZWRWaWV3ZXIgPT09ICdwZGYnXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5mdWxsVXJsID0gdGhpcy5kb21TYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdFJlc291cmNlVXJsKFxuICAgICAgICAgIHZpZXdlckRldGFpbHMudXJsXG4gICAgICAgICk7XG4gICAgICAgIC8vIHNlZTpcbiAgICAgICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDA0MTQwMzkvZ29vZ2xlLWRvY3Mtdmlld2VyLXJldHVybmluZy0yMDQtcmVzcG9uc2VzLW5vLWxvbmdlci13b3JraW5nLWFsdGVybmF0aXZlc1xuICAgICAgICAvLyBoYWNrIHRvIHJlbG9hZCBpZnJhbWUgaWYgaXQncyBub3QgbG9hZGVkLlxuICAgICAgICAvLyB3b3VsZCBtYXliZSBiZSBiZXR0ZXIgdG8gdXNlIHZpZXcub2ZmaWNlYXBwcy5saXZlLmNvbSBidXQgc2VlbXMgbm90IHRvIHdvcmsgd2l0aCBzYXMgdG9rZW4uXG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzLmNvbmZpZ3VyZWRWaWV3ZXIgPT09ICdnb29nbGUnICYmXG4gICAgICAgICAgdGhpcy5nb29nbGVDaGVja0NvbnRlbnRMb2FkZWRcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgICAgICAgLy8gaWYgaXQncyBub3QgbG9hZGVkIGFmdGVyIHRoZSBnb29nbGVJbnRlcnZhbENoZWNrLCB0aGVuIG9wZW4gbG9hZCBhZ2Fpbi5cbiAgICAgICAgICAgIGNvbnN0IGlmcmFtZSA9IHRoaXMuaWZyYW1lcz8uZmlyc3RcbiAgICAgICAgICAgICAgPy5uYXRpdmVFbGVtZW50IGFzIEhUTUxJRnJhbWVFbGVtZW50O1xuICAgICAgICAgICAgaWYgKGlmcmFtZSkge1xuICAgICAgICAgICAgICB0aGlzLnJlbG9hZElmcmFtZShpZnJhbWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5zaG91bGRDaGVja0lmcmFtZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5jb25maWd1cmVkVmlld2VyID09PSAnbWFtbW90aCcpIHtcbiAgICAgICAgdGhpcy5kb2NIdG1sID0gYXdhaXQgZ2V0RG9jeFRvSHRtbCh0aGlzLnVybCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZWxvYWRJZnJhbWUoaWZyYW1lOiBIVE1MSUZyYW1lRWxlbWVudCkge1xuICAgIHRoaXMuY2hlY2tJRnJhbWVTdWJzY3JpcHRpb24gPSBnb29nbGVDaGVja1N1YnNjcmlwdGlvbigpO1xuICAgIHRoaXMuY2hlY2tJRnJhbWVTdWJzY3JpcHRpb24uc3Vic2NyaWJlKFxuICAgICAgaWZyYW1lLFxuICAgICAgdGhpcy5nb29nbGVDaGVja0ludGVydmFsLFxuICAgICAgdGhpcy5nb29nbGVNYXhDaGVja3NcbiAgICApO1xuICB9XG5cbiAgaWZyYW1lTG9hZGVkKCkge1xuICAgIGNvbnN0IGlmcmFtZSA9IHRoaXMuaWZyYW1lcz8uZmlyc3Q/Lm5hdGl2ZUVsZW1lbnQgYXMgSFRNTElGcmFtZUVsZW1lbnQ7XG4gICAgaWYgKGlmcmFtZSAmJiBpZnJhbWVJc0xvYWRlZChpZnJhbWUpKSB7XG4gICAgICB0aGlzLmxvYWRlZC5lbWl0KHVuZGVmaW5lZCk7XG4gICAgICBpZiAodGhpcy5jaGVja0lGcmFtZVN1YnNjcmlwdGlvbikge1xuICAgICAgICB0aGlzLmNoZWNrSUZyYW1lU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCI8bmctY29udGFpbmVyICpuZ0lmPVwiIWV4dGVybmFsVmlld2VyXCI+XG4gIDxkaXYgKm5nSWY9XCJjb25maWd1cmVkVmlld2VyICE9PSAncGRmJ1wiIFtpbm5lckh0bWxdPVwiZG9jSHRtbFwiPjwvZGl2PlxuICA8b2JqZWN0XG4gICAgKm5nSWY9XCJmdWxsVXJsICYmIGNvbmZpZ3VyZWRWaWV3ZXIgPT09ICdwZGYnXCJcbiAgICBbZGF0YV09XCJmdWxsVXJsXCJcbiAgICB0eXBlPVwiYXBwbGljYXRpb24vcGRmXCJcbiAgICB3aWR0aD1cIjEwMCVcIlxuICAgIGhlaWdodD1cIjEwMCVcIlxuICA+XG4gICAgPHA+XG4gICAgICBZb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBQREZzLlxuICAgICAgPGEgW2hyZWZdPVwiZnVsbFVybFwiPkRvd25sb2FkIHRoZSBQREY8L2E+LlxuICAgIDwvcD5cbiAgPC9vYmplY3Q+XG48L25nLWNvbnRhaW5lcj5cbjxuZy1jb250YWluZXIgKm5nSWY9XCJleHRlcm5hbFZpZXdlclwiPlxuICA8aWZyYW1lXG4gICAgKGxvYWQpPVwiaWZyYW1lTG9hZGVkKClcIlxuICAgICpuZ0lmPVwiZnVsbFVybCAmJiBkaXNhYmxlQ29udGVudCA9PT0gJ25vbmUnXCJcbiAgICAjaWZyYW1lXG4gICAgaWQ9XCJpZnJhbWUtZG9jLXZpZXdlclwiXG4gICAgZnJhbWVCb3JkZXI9XCIwXCJcbiAgICBbc3JjXT1cImZ1bGxVcmxcIlxuICA+PC9pZnJhbWU+XG4gIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIiAqbmdJZj1cImRpc2FibGVDb250ZW50ICE9PSAnbm9uZSdcIj5cbiAgICA8ZGl2XG4gICAgICBbY2xhc3Mub3ZlcmxheS1mdWxsXT1cImRpc2FibGVDb250ZW50ID09PSAnYWxsJ1wiXG4gICAgICBbY2xhc3Mub3ZlcmxheS1wb3BvdXQtZ29vZ2xlXT1cIlxuICAgICAgICBjb25maWd1cmVkVmlld2VyID09PSAnZ29vZ2xlJyAmJlxuICAgICAgICAoZGlzYWJsZUNvbnRlbnQgPT09ICdwb3BvdXQnIHx8IGRpc2FibGVDb250ZW50ID09PSAncG9wb3V0LWhpZGUnKVxuICAgICAgXCJcbiAgICAgIFtjbGFzcy5vdmVybGF5LXBvcG91dC1vZmZpY2VdPVwiXG4gICAgICAgIGNvbmZpZ3VyZWRWaWV3ZXIgPT09ICdvZmZpY2UnICYmXG4gICAgICAgIChkaXNhYmxlQ29udGVudCA9PT0gJ3BvcG91dCcgfHwgZGlzYWJsZUNvbnRlbnQgPT09ICdwb3BvdXQtaGlkZScpXG4gICAgICBcIlxuICAgICAgW3N0eWxlLmJhY2tncm91bmQtY29sb3JdPVwiXG4gICAgICAgIGRpc2FibGVDb250ZW50ID09PSAncG9wb3V0LWhpZGUnID8gJyNmZmYnIDogJ3RyYW5zcGFyZW50J1xuICAgICAgXCJcbiAgICA+PC9kaXY+XG4gICAgPGlmcmFtZVxuICAgICAgKGxvYWQpPVwiaWZyYW1lTG9hZGVkKClcIlxuICAgICAgKm5nSWY9XCJmdWxsVXJsXCJcbiAgICAgICNpZnJhbWVcbiAgICAgIGlkPVwiaWZyYW1lXCJcbiAgICAgIGZyYW1lQm9yZGVyPVwiMFwiXG4gICAgICBbc3JjXT1cImZ1bGxVcmxcIlxuICAgID48L2lmcmFtZT5cbiAgPC9kaXY+XG48L25nLWNvbnRhaW5lcj5cbiJdfQ==