import { ElementRef, EventEmitter, OnDestroy, OnChanges, OnInit, SimpleChanges, DoCheck, IterableDiffer, IterableDiffers, KeyValueDiffer, KeyValueDiffers } from '@angular/core';
import { PlotlyService } from './plotly.service';
import { PlotlyThemeLoaderService, PlotlyTheme } from './plotly.theme-loader.service';
import { Plotly } from './plotly.interface';
import * as i0 from "@angular/core";
export declare class PlotlyComponent implements OnInit, OnChanges, OnDestroy, DoCheck {
    plotly: PlotlyService;
    themeLoader: PlotlyThemeLoaderService;
    iterableDiffers: IterableDiffers;
    keyValueDiffers: KeyValueDiffers;
    protected defaultClassName: string;
    plotlyInstance?: Plotly.PlotlyHTMLElement;
    resizeHandler?: (instance: Plotly.PlotlyHTMLElement) => void;
    layoutDiffer?: KeyValueDiffer<string, any>;
    dataDiffer?: IterableDiffer<Plotly.Data>;
    plotEl: ElementRef;
    data?: Plotly.Data[];
    layout?: Partial<Plotly.Layout>;
    config?: Partial<Plotly.Config>;
    frames?: Partial<Plotly.Config>[];
    style?: {
        [key: string]: string;
    };
    theme: PlotlyTheme;
    divId?: string;
    revision: number;
    className?: string | string[];
    debug: boolean;
    useResizeHandler: boolean;
    updateOnLayoutChange: boolean;
    updateOnDataChange: boolean;
    updateOnlyWithRevision: boolean;
    initialized: EventEmitter<Plotly.Figure>;
    update: EventEmitter<Plotly.Figure>;
    purge: EventEmitter<Plotly.Figure>;
    error: EventEmitter<Error>;
    afterExport: EventEmitter<any>;
    afterPlot: EventEmitter<any>;
    animated: EventEmitter<any>;
    animatingFrame: EventEmitter<any>;
    animationInterrupted: EventEmitter<any>;
    autoSize: EventEmitter<any>;
    beforeExport: EventEmitter<any>;
    beforeHover: EventEmitter<any>;
    buttonClicked: EventEmitter<any>;
    /**
     * @deprecated DEPRECATED: Reconsider using `(plotlyClick)` instead of `(click)` to avoid event conflict. Please check https://github.com/plotly/angular-plotly.js#FAQ
     */
    click: EventEmitter<any>;
    plotlyClick: EventEmitter<any>;
    clickAnnotation: EventEmitter<any>;
    deselect: EventEmitter<any>;
    doubleClick: EventEmitter<any>;
    framework: EventEmitter<any>;
    hover: EventEmitter<any>;
    legendClick: EventEmitter<any>;
    legendDoubleClick: EventEmitter<any>;
    /**
     * @deprecated DEPRECATED: Event react is not list as an plotly.js event
     */
    react: EventEmitter<any>;
    relayout: EventEmitter<any>;
    relayouting: EventEmitter<any>;
    restyle: EventEmitter<any>;
    redraw: EventEmitter<any>;
    selected: EventEmitter<any>;
    selecting: EventEmitter<any>;
    sliderChange: EventEmitter<any>;
    sliderEnd: EventEmitter<any>;
    sliderStart: EventEmitter<any>;
    sunburstclick: EventEmitter<any>;
    transitioning: EventEmitter<any>;
    transitionInterrupted: EventEmitter<any>;
    unhover: EventEmitter<any>;
    /**
     * @deprecated DEPRECATED: Event treemapclick is not list as an plotly.js event
     */
    treemapclick: EventEmitter<any>;
    webglcontextlost: EventEmitter<any>;
    eventNames: string[];
    constructor(plotly: PlotlyService, themeLoader: PlotlyThemeLoaderService, iterableDiffers: IterableDiffers, keyValueDiffers: KeyValueDiffers);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): boolean | void;
    getData(): Plotly.Data[];
    getWindow(): any;
    getClassName(): string;
    createPlot(): Promise<void>;
    createFigure(): Plotly.Figure;
    updatePlot(): Promise<any>;
    updateWindowResizeHandler(): void;
    dataDifferTrackBy(_: number, item: any): unknown;
    loadTheme(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PlotlyComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PlotlyComponent, "plotly-plot", never, { "data": "data"; "layout": "layout"; "config": "config"; "frames": "frames"; "style": "style"; "theme": "theme"; "divId": "divId"; "revision": "revision"; "className": "className"; "debug": "debug"; "useResizeHandler": "useResizeHandler"; "updateOnLayoutChange": "updateOnLayoutChange"; "updateOnDataChange": "updateOnDataChange"; "updateOnlyWithRevision": "updateOnlyWithRevision"; }, { "initialized": "initialized"; "update": "update"; "purge": "purge"; "error": "error"; "afterExport": "afterExport"; "afterPlot": "afterPlot"; "animated": "animated"; "animatingFrame": "animatingFrame"; "animationInterrupted": "animationInterrupted"; "autoSize": "autoSize"; "beforeExport": "beforeExport"; "beforeHover": "beforeHover"; "buttonClicked": "buttonClicked"; "click": "click"; "plotlyClick": "plotlyClick"; "clickAnnotation": "clickAnnotation"; "deselect": "deselect"; "doubleClick": "doubleClick"; "framework": "framework"; "hover": "hover"; "legendClick": "legendClick"; "legendDoubleClick": "legendDoubleClick"; "react": "react"; "relayout": "relayout"; "relayouting": "relayouting"; "restyle": "restyle"; "redraw": "redraw"; "selected": "selected"; "selecting": "selecting"; "sliderChange": "sliderChange"; "sliderEnd": "sliderEnd"; "sliderStart": "sliderStart"; "sunburstclick": "sunburstclick"; "transitioning": "transitioning"; "transitionInterrupted": "transitionInterrupted"; "unhover": "unhover"; "treemapclick": "treemapclick"; "webglcontextlost": "webglcontextlost"; }, never, ["*"], false, never>;
}
