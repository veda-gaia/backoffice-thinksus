import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { PlotlyService } from './plotly.service';
import { PlotlySharedModule } from './plotly-shared.module';
import * as i0 from "@angular/core";
export class PlotlyModule {
    constructor() {
        if (!this.isValid()) {
            const msg = 'Invalid PlotlyJS object. Please check https://github.com/plotly/angular-plotly.js#quick-start'
                + ' to see how to add PlotlyJS to your project.';
            throw new Error(msg);
        }
        PlotlyService.setPlotly(PlotlyModule.plotlyjs);
    }
    isValid() {
        return PlotlyModule.plotlyjs !== undefined
            && (typeof PlotlyModule.plotlyjs.plot === 'function'
                || typeof PlotlyModule.plotlyjs.newPlot === 'function');
    }
}
PlotlyModule.plotlyjs = {};
PlotlyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.6", ngImport: i0, type: PlotlyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
PlotlyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.6", ngImport: i0, type: PlotlyModule, imports: [CommonModule, PlotlySharedModule], exports: [PlotlySharedModule] });
PlotlyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.6", ngImport: i0, type: PlotlyModule, providers: [PlotlyService], imports: [CommonModule, PlotlySharedModule, PlotlySharedModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.6", ngImport: i0, type: PlotlyModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [],
                    imports: [CommonModule, PlotlySharedModule],
                    providers: [PlotlyService],
                    exports: [PlotlySharedModule],
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxvdGx5Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3Bsb3RseS9zcmMvbGliL3Bsb3RseS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDOztBQVU1RCxNQUFNLE9BQU8sWUFBWTtJQUdyQjtRQUNJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDakIsTUFBTSxHQUFHLEdBQUcsK0ZBQStGO2tCQUNyRyw4Q0FBOEMsQ0FBQztZQUNyRCxNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3hCO1FBRUQsYUFBYSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVPLE9BQU87UUFDWCxPQUFPLFlBQVksQ0FBQyxRQUFRLEtBQUssU0FBUztlQUNuQyxDQUFDLE9BQU8sWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEtBQUssVUFBVTttQkFDN0MsT0FBTyxZQUFZLENBQUMsUUFBUSxDQUFDLE9BQU8sS0FBSyxVQUFVLENBQUMsQ0FBQztJQUNwRSxDQUFDOztBQWhCYSxxQkFBUSxHQUFRLEVBQUUsQ0FBQzt5R0FEeEIsWUFBWTswR0FBWixZQUFZLFlBSlgsWUFBWSxFQUFFLGtCQUFrQixhQUVoQyxrQkFBa0I7MEdBRW5CLFlBQVksYUFIVixDQUFDLGFBQWEsQ0FBQyxZQURoQixZQUFZLEVBQUUsa0JBQWtCLEVBRWhDLGtCQUFrQjsyRkFFbkIsWUFBWTtrQkFOeEIsUUFBUTttQkFBQztvQkFDTixZQUFZLEVBQUUsRUFBRTtvQkFDaEIsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLGtCQUFrQixDQUFDO29CQUMzQyxTQUFTLEVBQUUsQ0FBQyxhQUFhLENBQUM7b0JBQzFCLE9BQU8sRUFBRSxDQUFDLGtCQUFrQixDQUFDO2lCQUNoQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBQbG90bHlTZXJ2aWNlIH0gZnJvbSAnLi9wbG90bHkuc2VydmljZSc7XG5pbXBvcnQgeyBQbG90bHlTaGFyZWRNb2R1bGUgfSBmcm9tICcuL3Bsb3RseS1zaGFyZWQubW9kdWxlJztcblxuXG5cbkBOZ01vZHVsZSh7XG4gICAgZGVjbGFyYXRpb25zOiBbXSxcbiAgICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBQbG90bHlTaGFyZWRNb2R1bGVdLFxuICAgIHByb3ZpZGVyczogW1Bsb3RseVNlcnZpY2VdLFxuICAgIGV4cG9ydHM6IFtQbG90bHlTaGFyZWRNb2R1bGVdLFxufSlcbmV4cG9ydCBjbGFzcyBQbG90bHlNb2R1bGUge1xuICAgIHB1YmxpYyBzdGF0aWMgcGxvdGx5anM6IGFueSA9IHt9O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9ICdJbnZhbGlkIFBsb3RseUpTIG9iamVjdC4gUGxlYXNlIGNoZWNrIGh0dHBzOi8vZ2l0aHViLmNvbS9wbG90bHkvYW5ndWxhci1wbG90bHkuanMjcXVpY2stc3RhcnQnXG4gICAgICAgICAgICAgICAgKyAnIHRvIHNlZSBob3cgdG8gYWRkIFBsb3RseUpTIHRvIHlvdXIgcHJvamVjdC4nO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICAgIH1cblxuICAgICAgICBQbG90bHlTZXJ2aWNlLnNldFBsb3RseShQbG90bHlNb2R1bGUucGxvdGx5anMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNWYWxpZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIFBsb3RseU1vZHVsZS5wbG90bHlqcyAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAmJiAodHlwZW9mIFBsb3RseU1vZHVsZS5wbG90bHlqcy5wbG90ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgfHwgdHlwZW9mIFBsb3RseU1vZHVsZS5wbG90bHlqcy5uZXdQbG90ID09PSAnZnVuY3Rpb24nKTtcbiAgICB9XG59XG4iXX0=