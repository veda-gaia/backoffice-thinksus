/* eslint-disable @angular-eslint/no-conflicting-lifecycle */
import { Component, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { PlotlyService } from './plotly.service';
import * as i0 from "@angular/core";
import * as i1 from "./plotly.service";
import * as i2 from "./plotly.theme-loader.service";
import * as i3 from "@angular/common";
// @dynamic
export class PlotlyComponent {
    constructor(plotly, themeLoader, iterableDiffers, keyValueDiffers) {
        this.plotly = plotly;
        this.themeLoader = themeLoader;
        this.iterableDiffers = iterableDiffers;
        this.keyValueDiffers = keyValueDiffers;
        this.defaultClassName = 'js-plotly-plot';
        this.theme = "none";
        this.revision = 0;
        this.debug = false;
        this.useResizeHandler = false;
        this.updateOnLayoutChange = true;
        this.updateOnDataChange = true;
        this.updateOnlyWithRevision = false;
        this.initialized = new EventEmitter();
        this.update = new EventEmitter();
        this.purge = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.error = new EventEmitter();
        this.afterExport = new EventEmitter();
        this.afterPlot = new EventEmitter();
        this.animated = new EventEmitter();
        this.animatingFrame = new EventEmitter();
        this.animationInterrupted = new EventEmitter();
        this.autoSize = new EventEmitter();
        this.beforeExport = new EventEmitter();
        this.beforeHover = new EventEmitter();
        this.buttonClicked = new EventEmitter();
        /**
         * @deprecated DEPRECATED: Reconsider using `(plotlyClick)` instead of `(click)` to avoid event conflict. Please check https://github.com/plotly/angular-plotly.js#FAQ
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.click = new EventEmitter();
        this.plotlyClick = new EventEmitter();
        this.clickAnnotation = new EventEmitter();
        this.deselect = new EventEmitter();
        this.doubleClick = new EventEmitter();
        this.framework = new EventEmitter();
        this.hover = new EventEmitter();
        this.legendClick = new EventEmitter();
        this.legendDoubleClick = new EventEmitter();
        /**
         * @deprecated DEPRECATED: Event react is not list as an plotly.js event
         */
        this.react = new EventEmitter();
        this.relayout = new EventEmitter();
        this.relayouting = new EventEmitter();
        this.restyle = new EventEmitter();
        this.redraw = new EventEmitter();
        this.selected = new EventEmitter();
        this.selecting = new EventEmitter();
        this.sliderChange = new EventEmitter();
        this.sliderEnd = new EventEmitter();
        this.sliderStart = new EventEmitter();
        this.sunburstclick = new EventEmitter();
        this.transitioning = new EventEmitter();
        this.transitionInterrupted = new EventEmitter();
        this.unhover = new EventEmitter();
        /**
         * @deprecated DEPRECATED: Event treemapclick is not list as an plotly.js event
         */
        this.treemapclick = new EventEmitter();
        this.webglcontextlost = new EventEmitter();
        this.eventNames = ['afterExport', 'afterPlot', 'animated', 'animatingFrame', 'animationInterrupted', 'autoSize',
            'beforeExport', 'beforeHover', 'buttonClicked', 'clickAnnotation', 'deselect', 'doubleClick', 'framework', 'hover',
            'legendClick', 'legendDoubleClick', 'react', 'relayout', 'relayouting', 'restyle', 'redraw', 'selected', 'selecting', 'sliderChange',
            'sliderEnd', 'sliderStart', 'sunburstclick', 'transitioning', 'transitionInterrupted', 'unhover', 'treemapclick', 'webglcontextlost'];
    }
    ngOnInit() {
        this.createPlot().then(() => {
            const figure = this.createFigure();
            this.initialized.emit(figure);
        });
        if (this.click.observers.length > 0) {
            const msg = 'DEPRECATED: Reconsider using `(plotlyClick)` instead of `(click)` to avoid event conflict. '
                + 'Please check https://github.com/plotly/angular-plotly.js#FAQ';
            console.error(msg);
        }
        // if (this.theme != 'none') this.loadTheme();
    }
    ngOnDestroy() {
        if (typeof this.resizeHandler === 'function') {
            this.getWindow().removeEventListener('resize', this.resizeHandler);
            this.resizeHandler = undefined;
        }
        if (this.plotlyInstance) {
            const figure = this.createFigure();
            this.purge.emit(figure);
            PlotlyService.remove(this.plotlyInstance);
        }
    }
    ngOnChanges(changes) {
        let shouldUpdate = false;
        const revision = changes['revision'];
        if (revision && !revision.isFirstChange()) {
            shouldUpdate = true;
        }
        const debug = changes['debug'];
        if (debug && !debug.isFirstChange()) {
            shouldUpdate = true;
        }
        if (shouldUpdate) {
            this.updatePlot();
        }
        this.updateWindowResizeHandler();
    }
    ngDoCheck() {
        if (this.updateOnlyWithRevision) {
            return false;
        }
        let shouldUpdate = false;
        if (this.updateOnLayoutChange) {
            if (this.layoutDiffer) {
                const layoutHasDiff = this.layoutDiffer.diff(this.layout);
                if (layoutHasDiff) {
                    shouldUpdate = true;
                }
            }
            else if (this.layout) {
                this.layoutDiffer = this.keyValueDiffers.find(this.layout).create();
            }
            else {
                this.layoutDiffer = undefined;
            }
        }
        if (this.updateOnDataChange) {
            if (this.dataDiffer) {
                const dataHasDiff = this.dataDiffer.diff(this.data);
                if (dataHasDiff) {
                    shouldUpdate = true;
                }
            }
            else if (Array.isArray(this.data)) {
                this.dataDiffer = this.iterableDiffers.find(this.data).create(this.dataDifferTrackBy);
            }
            else {
                this.dataDiffer = undefined;
            }
        }
        if (shouldUpdate && this.plotlyInstance) {
            this.updatePlot();
        }
    }
    getData() {
        return this.data ?? [];
    }
    getWindow() {
        return window;
    }
    getClassName() {
        let classes = [this.defaultClassName];
        if (Array.isArray(this.className)) {
            classes = classes.concat(this.className);
        }
        else if (this.className) {
            classes.push(this.className);
        }
        return classes.join(' ');
    }
    createPlot() {
        return this.plotly.newPlot(this.plotEl.nativeElement, this.getData(), this.layout, this.config, this.frames).then(plotlyInstance => {
            this.plotlyInstance = plotlyInstance;
            this.getWindow().gd = this.debug ? plotlyInstance : undefined;
            this.eventNames.forEach(name => {
                const eventName = `plotly_${name.toLowerCase()}`;
                const event = this[name];
                plotlyInstance.on(eventName, (data) => event.emit(data));
            });
            plotlyInstance.on('plotly_click', (data) => {
                this.plotlyClick.emit(data);
            });
            this.updateWindowResizeHandler();
        }, err => {
            console.error('Error while plotting:', err);
            this.error.emit(err);
        });
    }
    createFigure() {
        const p = this.plotlyInstance;
        const figure = {
            data: p.data,
            layout: p.layout,
            frames: p._transitionData ? p._transitionData._frames : null
        };
        return figure;
    }
    updatePlot() {
        if (!this.plotlyInstance) {
            const error = new Error(`Plotly component wasn't initialized`);
            this.error.emit(error);
            throw error;
        }
        const layout = { ...this.layout };
        return this.plotly.update(this.plotlyInstance, this.getData(), layout, this.config, this.frames).then(() => {
            const figure = this.createFigure();
            this.update.emit(figure);
        }, err => {
            console.error('Error while updating plot:', err);
            this.error.emit(err);
        });
    }
    updateWindowResizeHandler() {
        if (this.useResizeHandler) {
            if (this.resizeHandler === undefined) {
                this.resizeHandler = () => this.plotly.resize(this.plotlyInstance);
                this.getWindow().addEventListener('resize', this.resizeHandler);
            }
        }
        else {
            if (typeof this.resizeHandler === 'function') {
                this.getWindow().removeEventListener('resize', this.resizeHandler);
                this.resizeHandler = undefined;
            }
        }
    }
    dataDifferTrackBy(_, item) {
        const obj = Object.assign({}, item, { uid: '' });
        return JSON.stringify(obj);
    }
    loadTheme() {
        if (this.layout !== undefined) {
            const msg = 'You fulfill both `theme` and `layout` properties. This will overwrite the `layout` data with the `theme` data.';
            console.warn(msg);
        }
        this.themeLoader.load(this.theme).then(theme => this.layout = theme);
    }
}
PlotlyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.6", ngImport: i0, type: PlotlyComponent, deps: [{ token: i1.PlotlyService }, { token: i2.PlotlyThemeLoaderService }, { token: i0.IterableDiffers }, { token: i0.KeyValueDiffers }], target: i0.ɵɵFactoryTarget.Component });
PlotlyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.6", type: PlotlyComponent, selector: "plotly-plot", inputs: { data: "data", layout: "layout", config: "config", frames: "frames", style: "style", theme: "theme", divId: "divId", revision: "revision", className: "className", debug: "debug", useResizeHandler: "useResizeHandler", updateOnLayoutChange: "updateOnLayoutChange", updateOnDataChange: "updateOnDataChange", updateOnlyWithRevision: "updateOnlyWithRevision" }, outputs: { initialized: "initialized", update: "update", purge: "purge", error: "error", afterExport: "afterExport", afterPlot: "afterPlot", animated: "animated", animatingFrame: "animatingFrame", animationInterrupted: "animationInterrupted", autoSize: "autoSize", beforeExport: "beforeExport", beforeHover: "beforeHover", buttonClicked: "buttonClicked", click: "click", plotlyClick: "plotlyClick", clickAnnotation: "clickAnnotation", deselect: "deselect", doubleClick: "doubleClick", framework: "framework", hover: "hover", legendClick: "legendClick", legendDoubleClick: "legendDoubleClick", react: "react", relayout: "relayout", relayouting: "relayouting", restyle: "restyle", redraw: "redraw", selected: "selected", selecting: "selecting", sliderChange: "sliderChange", sliderEnd: "sliderEnd", sliderStart: "sliderStart", sunburstclick: "sunburstclick", transitioning: "transitioning", transitionInterrupted: "transitionInterrupted", unhover: "unhover", treemapclick: "treemapclick", webglcontextlost: "webglcontextlost" }, providers: [PlotlyService], viewQueries: [{ propertyName: "plotEl", first: true, predicate: ["plot"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: `<div #plot [attr.id]="divId" [ngClass]="getClassName()" [ngStyle]="style">
      <ng-content></ng-content>
    </div>`, isInline: true, dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.6", ngImport: i0, type: PlotlyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'plotly-plot',
                    template: `<div #plot [attr.id]="divId" [ngClass]="getClassName()" [ngStyle]="style">
      <ng-content></ng-content>
    </div>`,
                    providers: [PlotlyService],
                }]
        }], ctorParameters: function () { return [{ type: i1.PlotlyService }, { type: i2.PlotlyThemeLoaderService }, { type: i0.IterableDiffers }, { type: i0.KeyValueDiffers }]; }, propDecorators: { plotEl: [{
                type: ViewChild,
                args: ['plot', { static: true }]
            }], data: [{
                type: Input
            }], layout: [{
                type: Input
            }], config: [{
                type: Input
            }], frames: [{
                type: Input
            }], style: [{
                type: Input
            }], theme: [{
                type: Input
            }], divId: [{
                type: Input
            }], revision: [{
                type: Input
            }], className: [{
                type: Input
            }], debug: [{
                type: Input
            }], useResizeHandler: [{
                type: Input
            }], updateOnLayoutChange: [{
                type: Input
            }], updateOnDataChange: [{
                type: Input
            }], updateOnlyWithRevision: [{
                type: Input
            }], initialized: [{
                type: Output
            }], update: [{
                type: Output
            }], purge: [{
                type: Output
            }], error: [{
                type: Output
            }], afterExport: [{
                type: Output
            }], afterPlot: [{
                type: Output
            }], animated: [{
                type: Output
            }], animatingFrame: [{
                type: Output
            }], animationInterrupted: [{
                type: Output
            }], autoSize: [{
                type: Output
            }], beforeExport: [{
                type: Output
            }], beforeHover: [{
                type: Output
            }], buttonClicked: [{
                type: Output
            }], click: [{
                type: Output
            }], plotlyClick: [{
                type: Output
            }], clickAnnotation: [{
                type: Output
            }], deselect: [{
                type: Output
            }], doubleClick: [{
                type: Output
            }], framework: [{
                type: Output
            }], hover: [{
                type: Output
            }], legendClick: [{
                type: Output
            }], legendDoubleClick: [{
                type: Output
            }], react: [{
                type: Output
            }], relayout: [{
                type: Output
            }], relayouting: [{
                type: Output
            }], restyle: [{
                type: Output
            }], redraw: [{
                type: Output
            }], selected: [{
                type: Output
            }], selecting: [{
                type: Output
            }], sliderChange: [{
                type: Output
            }], sliderEnd: [{
                type: Output
            }], sliderStart: [{
                type: Output
            }], sunburstclick: [{
                type: Output
            }], transitioning: [{
                type: Output
            }], transitionInterrupted: [{
                type: Output
            }], unhover: [{
                type: Output
            }], treemapclick: [{
                type: Output
            }], webglcontextlost: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,